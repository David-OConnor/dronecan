[package]
authors = ["David O'Connor <the_alchemist@fastmail.com>"]
name = "dronecan"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
fdcan = "0.1.2"
# todo: Hardcoded for Can type.
cortex-m = "^0.7.7"
stm32-hal2 = { path = "../../stm32-hal", feature = "g431" }

# To parse enums from their integer repr
num_enum = { version = "^0.6.0", default_features = false }

# 16-bit floating point.
half = { version = "^2.2.1", default_features = false }

num-traits = { version = "^0.2.15", default_features = false } # Rounding.

# For the tightly-packed and many-fielded Fix2.
packed_struct = {version = "^0.10.1", default_features = false }

nb = "^1.1.0"  # For use with Fdcan lib's infallible type.

defmt = "0.3.4"

# We use bitvec for serializing and deserializing standard DroneCan DSDL
# types that use dynamic-sized arrays; these are unable to be tackled by PackedStruct.
# This is mainly used for by the `GetSet` DSDL message.
bitvec = { version = "1.0.1", default-features = false }

[features]
g4 = ["fdcan/fdcan_g0_g4_l5",  "stm32-hal2/g431", "stm32-hal2/can_fd_g"]
h7 = ["fdcan/fdcan_h7", "stm32-hal2/h743v", "stm32-hal2/can_fd_h"]

