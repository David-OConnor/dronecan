[package]
authors = ["David O'Connor <the_alchemist@fastmail.com>"]
name = "dronecan"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
fdcan = { version = "^0.2.0", optional = true }
hal = { package = "stm32-hal2", version = "^1.8.5", optional = true }

# To parse enums from their integer repr
num_enum = { version = "^0.7.0", default_features = false }
num-traits = { version = "^0.2.15", default_features = false } # Rounding.

nb = "^1.1.0"  # For use with Fdcan lib's infallible type.

defmt = { version = "0.3.4", optional = true }

# For the tightly-packed and many-fielded Fix2.
packed_struct = { version = "^0.10.1", default_features = false }
# We use bitvec for serializing and deserializing standard DroneCan DSDL
# types that use dynamic-sized arrays; these are unable to be tackled by PackedStruct.
# This is mainly used for by the `GetSet` DSDL message.
bitvec = { version = "1.0.1", default-features = false }

# for f16 implementation, mimicking `half`'s.
crunchy = "0.2.2"

[features]
hal = []
hal_g431 = ["fdcan/fdcan_g0_g4_l5", "hal/g431", "hal/can_fd_g", "defmt", "hal"]
hal_g473 = ["fdcan/fdcan_g0_g4_l5", "hal/g473", "hal/can_fd_g", "defmt", "hal"]
hal_h7 = ["fdcan/fdcan_h7", "hal/h743v", "hal/can_fd_h", "defmt", "hal"]

